def calculate_shipping_cost(weights, shipping_process):
    valid_shipping_processes = ['Express', 'Standard']
    if shipping_process not in valid_shipping_processes:
        return "Invalid shipping process. Valid options: Express, Standard"

    if not weights:
        return "Payload is empty."

    total_weight = 0
    total_cost = 0  

    try:
        # Calculate total weight and shipping cost
        for item in weights:
            weight = float(item["weight"]) * int(item["quantity"])
            item_cost = weight * float(item["naira_price"])
            total_weight += weight
            total_cost += item_cost

        return total_weight, total_cost

    except ValueError as e:
        return f"Error: {str(e)}. Please ensure weight, quantity, and naira_price are valid numbers."

# Function to format currency
def format_currency(amount):
    return "â‚¦{:,.2f}".format(float(amount))  # Format naira as currency

# Wrapper function to return the calculate_shipping_cost function and the result
def calculate_and_return(weights, shipping_process):
    shipping_function = calculate_shipping_cost
    result = shipping_function(weights, shipping_process)
    return shipping_function, result

# Example usage
weights = [
    {"weight": "1", "quantity": "2", "naira_price": "23800"},
    {"weight": "4", "quantity": "1", "naira_price": "3200"},
    {"weight": "3", "quantity": "5", "naira_price": "2100"}
]
shipping_process = 'Standard'  

shipping_function, result = calculate_and_return(weights, shipping_process)
if isinstance(result, tuple):
    total_weight, shipping_cost = result
    print("Total Weight:", total_weight, "kg")
    print("Total Shipping Cost:", format_currency(shipping_cost))
else:
    print(result)

